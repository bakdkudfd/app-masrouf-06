import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
  StatusBar,
  Share,
  Modal,
  TextInput,
} from 'react-native';
import { useColorScheme } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
import { 
  Moon, 
  Sun, 
  Bell, 
  Download, 
  Share2, 
  Trash2, 
  DollarSign, 
  Wallet, 
  Info, 
  HelpCircle, 
  ChevronRight,
  Calendar,
  RefreshCw,
  Database,
  Shield,
  Smartphone
} from 'lucide-react-native';
import { DatabaseService } from '@/utils/database';

interface AppSettings {
  darkMode: boolean;
  notifications: boolean;
  dailyReminder: boolean;
  reminderTime: string;
  currency: string;
  language: string;
  monthStartDate: number;
  budgetWarnings: boolean;
  autoBackup: boolean;
}

interface UserData {
  salary: number;
  monthlyExpenses: any[];
  salaryDate: string;
}

export default function SettingsScreen() {
  const systemColorScheme = useColorScheme();
  const router = useRouter();
  
  const [settings, setSettings] = useState<AppSettings>({
    darkMode: systemColorScheme === 'dark',
    notifications: true,
    dailyReminder: true,
    reminderTime: '20:00',
    currency: 'DZD',
    language: 'ar',
    monthStartDate: 1,
    budgetWarnings: true,
    autoBackup: false,
  });

  const [userData, setUserData] = useState<UserData | null>(null);
  const [showMonthStartModal, setShowMonthStartModal] = useState(false);
  const [showReminderTimeModal, setShowReminderTimeModal] = useState(false);
  const [tempMonthStart, setTempMonthStart] = useState('1');
  const [tempReminderTime, setTempReminderTime] = useState('20:00');

  const isDark = settings.darkMode;

  const colors = {
    primary: '#4CAF50',
    secondary: '#2196F3',
    accent: '#FF9800',
    danger: '#F44336',
    warning: '#FFC107',
    success: '#8BC34A',
    background: isDark ? '#1A1A1A' : '#F8F9FA',
    card: isDark ? '#2D2D2D' : '#FFFFFF',
    text: isDark ? '#FFFFFF' : '#333333',
    textSecondary: isDark ? '#B0B0B0' : '#666666',
    border: isDark ? '#404040' : '#E0E0E0',
    modalBackground: isDark ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.5)',
    inputBg: isDark ? '#404040' : '#F5F5F5',
  };

  useEffect(() => {
    loadSettings();
    loadUserData();
  }, []);

  const loadSettings = async () => {
    try {
      const savedSettings = await AsyncStorage.getItem('appSettings');
      if (savedSettings) {
        setSettings(JSON.parse(savedSettings));
      }
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  };

  const loadUserData = async () => {
    try {
      const data = await AsyncStorage.getItem('userData');
      if (data) {
        setUserData(JSON.parse(data));
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const saveSettings = async (newSettings: AppSettings) => {
    try {
      await AsyncStorage.setItem('appSettings', JSON.stringify(newSettings));
      setSettings(newSettings);
    } catch (error) {
      console.error('Error saving settings:', error);
      Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™');
    }
  };

  const handleToggleSetting = (key: keyof AppSettings, value: boolean) => {
    const newSettings = { ...settings, [key]: value };
    saveSettings(newSettings);
  };

  const handleExportData = async () => {
    try {
      const exportData = await DatabaseService.exportAllData();

      const dataString = JSON.stringify(exportData, null, 2);
      
      await Share.share({
        message: `ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿµÿ±ŸàŸÅŸä - ÿ™ŸÖ ÿßŸÑÿ™ÿµÿØŸäÿ± ŸÅŸä ${new Date().toLocaleDateString('ar')}\n\n${dataString}`,
        title: 'ÿ™ÿµÿØŸäÿ± ÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿµÿ±ŸàŸÅŸä',
      });

      Alert.alert('ÿ™ŸÖ ÿßŸÑÿ™ÿµÿØŸäÿ±', 'ÿ™ŸÖ ÿ™ÿµÿØŸäÿ± ÿ®ŸäÿßŸÜÿßÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠');
    } catch (error) {
      console.error('Error exporting data:', error);
      Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™');
    }
  };

  const handleClearData = () => {
    Alert.alert(
      'ŸÖÿ≥ÿ≠ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™',
      'ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿ®ŸäÿßŸÜÿßÿ™ŸÉÿü ÿ≥Ÿäÿ™ŸÖ ÿ≠ÿ∞ŸÅ:\n\n‚Ä¢ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑŸÖÿ≥ÿ¨ŸÑÿ©\n‚Ä¢ ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÖÿßŸÑŸäÿ©\n‚Ä¢ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ±ÿßÿ™ÿ®\n\nŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿ™ÿ±ÿßÿ¨ÿπ ÿπŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°.',
      [
        { text: 'ÿ•ŸÑÿ∫ÿßÿ°', style: 'cancel' },
        {
          text: 'ÿ≠ÿ∞ŸÅ ŸÜŸáÿßÿ¶ŸäÿßŸã',
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.multiRemove(['userData', 'financialGoals']);
              Alert.alert('ÿ™ŸÖ ÿßŸÑÿ≠ÿ∞ŸÅ', 'ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠. ÿ≥Ÿäÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ.');
              // Reset to initial state
              setUserData(null);
            } catch (error) {
              console.error('Error clearing data:', error);
              Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ≠ÿ∞ŸÅ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™');
            }
          },
        },
      ]
    );
  };

  const handleResetMonth = () => {
    Alert.alert(
      'ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑ ÿßŸÑÿ¥Ÿáÿ±',
      'ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑÿ≠ÿßŸÑŸäÿü ÿ≥Ÿäÿ™ŸÖ:\n\n‚Ä¢ ŸÖÿ≥ÿ≠ ÿ¨ŸÖŸäÿπ ŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑÿ≠ÿßŸÑŸä\n‚Ä¢ ÿßŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑÿ±ÿßÿ™ÿ® ŸàÿßŸÑÿ£ŸáÿØÿßŸÅ\n‚Ä¢ ÿ®ÿØÿ° ÿ¥Ÿáÿ± ŸÖÿßŸÑŸä ÿ¨ÿØŸäÿØ',
      [
        { text: 'ÿ•ŸÑÿ∫ÿßÿ°', style: 'cancel' },
        {
          text: 'ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑',
          style: 'destructive',
          onPress: async () => {
            try {
              if (userData) {
                const resetData = {
                  ...userData,
                  monthlyExpenses: [],
                  salaryDate: new Date().toISOString(),
                };
                await AsyncStorage.setItem('userData', JSON.stringify(resetData));
                setUserData(resetData);
                Alert.alert('ÿ™ŸÖ ÿßŸÑÿ•ÿπÿßÿØÿ©', 'ÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑ ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßŸÑŸä ÿ®ŸÜÿ¨ÿßÿ≠');
              }
            } catch (error) {
              console.error('Error resetting month:', error);
              Alert.alert('ÿÆÿ∑ÿ£', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑ ÿßŸÑÿ¥Ÿáÿ±');
            }
          },
        },
      ]
    );
  };

  const handleEditSalary = () => {
    router.push('/salary-setup');
  };

  const handleMonthStartSave = () => {
    const day = parseInt(tempMonthStart);
    if (day >= 1 && day <= 28) {
      const newSettings = { ...settings, monthStartDate: day };
      saveSettings(newSettings);
      setShowMonthStartModal(false);
      Alert.alert('ÿ™ŸÖ ÿßŸÑÿ≠ŸÅÿ∏', `ÿ≥Ÿäÿ®ÿØÿ£ ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßŸÑŸä ŸÅŸä ÿßŸÑŸäŸàŸÖ ${day} ŸÖŸÜ ŸÉŸÑ ÿ¥Ÿáÿ±`);
    } else {
      Alert.alert('ÿÆÿ∑ÿ£', 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ŸäŸàŸÖ ÿµÿ≠Ÿäÿ≠ (1-28)');
    }
  };

  const handleReminderTimeSave = () => {
    const newSettings = { ...settings, reminderTime: tempReminderTime };
    saveSettings(newSettings);
    setShowReminderTimeModal(false);
    Alert.alert('ÿ™ŸÖ ÿßŸÑÿ≠ŸÅÿ∏', `ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ± ŸäŸàŸÖŸäÿßŸã ŸÅŸä ${tempReminderTime}`);
  };

  const showAbout = () => {
    Alert.alert(
      'ÿ≠ŸàŸÑ ŸÖÿµÿ±ŸàŸÅŸä',
      'ŸÖÿµÿ±ŸàŸÅŸä - ÿ™ÿ∑ÿ®ŸäŸÇ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ¥ÿÆÿµŸäÿ©\nÿßŸÑÿ•ÿµÿØÿßÿ±: 1.0.0\n\nÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿµŸÖŸÖ ÿÆÿµŸäÿµÿßŸã ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑÿπÿ±ÿ® ŸÑÿ™ÿ™ÿ®ÿπ Ÿàÿ•ÿØÿßÿ±ÿ© ŸÖÿµÿßÿ±ŸäŸÅŸáŸÖ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ®ÿ≥Ÿäÿ∑ÿ© ŸàŸÅÿπÿßŸÑÿ©.\n\n‚ú® ÿßŸÑŸÖŸäÿ≤ÿßÿ™:\n‚Ä¢ ŸäÿπŸÖŸÑ ÿ®ÿØŸàŸÜ ÿ•ŸÜÿ™ÿ±ŸÜÿ™\n‚Ä¢ ÿ™ÿ™ÿ®ÿπ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ŸàÿßŸÑÿ£ŸáÿØÿßŸÅ\n‚Ä¢ ÿ™ŸÇÿßÿ±Ÿäÿ± ÿ∞ŸÉŸäÿ© ŸàŸÜÿµÿßÿ¶ÿ≠ ŸÖÿßŸÑŸäÿ©\n‚Ä¢ Ÿàÿßÿ¨Ÿáÿ© ÿπÿ±ÿ®Ÿäÿ© ÿ®ÿßŸÑŸÉÿßŸÖŸÑ\n\nÿ¨ŸÖŸäÿπ ÿ®ŸäÿßŸÜÿßÿ™ŸÉ ŸÖÿ≠ŸÅŸàÿ∏ÿ© ŸÖÿ≠ŸÑŸäÿßŸã ÿπŸÑŸâ ÿ¨Ÿáÿßÿ≤ŸÉ.',
      [{ text: 'ÿ≠ÿ≥ŸÜÿßŸã' }]
    );
  };

  const showHelp = () => {
    Alert.alert(
      'ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸàÿßŸÑÿØÿπŸÖ',
      'ŸÉŸäŸÅŸäÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ:\n\nüì± ÿßŸÑÿ®ÿØÿßŸäÿ©:\n‚Ä¢ ÿ£ÿØÿÆŸÑ ÿ±ÿßÿ™ÿ®ŸÉ ÿßŸÑÿ¥Ÿáÿ±Ÿä ŸÖŸÜ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™\n‚Ä¢ ÿ≠ÿØÿØ ÿ™ÿßÿ±ŸäÿÆ ÿ®ÿØÿßŸäÿ© ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßŸÑŸä\n\nüí∞ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ:\n‚Ä¢ ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ "ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿµÿ±ŸàŸÅ"\n‚Ä¢ ÿ£ÿØÿÆŸÑ ÿßŸÑŸÖÿ®ŸÑÿ∫ ŸàÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ¶ÿ©\n‚Ä¢ ÿ£ÿ∂ŸÅ ÿ≠ÿßŸÑÿ™ŸÉ ÿßŸÑŸÖÿ≤ÿßÿ¨Ÿäÿ© ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä\n\nüìä ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±:\n‚Ä¢ ÿ±ÿßÿ¨ÿπ ÿ™ŸÇÿßÿ±Ÿäÿ±ŸÉ ŸÅŸä ŸÇÿ≥ŸÖ "ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±"\n‚Ä¢ ÿ™ÿßÿ®ÿπ ÿ£ŸÜŸÖÿßÿ∑ ÿ•ŸÜŸÅÿßŸÇŸÉ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ©\n\nüéØ ÿßŸÑÿ£ŸáÿØÿßŸÅ:\n‚Ä¢ ÿ∂ÿπ ÿ£ŸáÿØÿßŸÅÿßŸã ŸÖÿßŸÑŸäÿ© Ÿàÿ™ÿ™ÿ®ÿπ ÿ™ŸÇÿØŸÖŸÉ\n‚Ä¢ ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ÿ™ÿ≠ŸÅŸäÿ≤ ŸÑÿ™ÿ≠ŸÇŸäŸÇ ÿ£ÿ≠ŸÑÿßŸÖŸÉ\n\n‚öôÔ∏è ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™:\n‚Ä¢ ÿÆÿµÿµ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿ≠ÿ≥ÿ® ÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ŸÉ\n‚Ä¢ ÿµÿØŸëÿ± ÿ®ŸäÿßŸÜÿßÿ™ŸÉ ŸÑŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä',
      [{ text: 'ŸÅŸáŸÖÿ™' }]
    );
  };

  const getDataSummary = () => {
    if (!userData) return 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™';
    
    const expensesCount = userData.monthlyExpenses?.length || 0;
    const totalAmount = userData.monthlyExpenses?.reduce((sum, exp) => sum + exp.amount, 0) || 0;
    
    return `${expensesCount} ŸÖÿµÿ±ŸàŸÅ ‚Ä¢ ${totalAmount.toLocaleString()} ÿØ.ÿ¨`;
  };

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <StatusBar barStyle={isDark ? 'light-content' : 'dark-content'} />
      
      <View style={[styles.header, { backgroundColor: colors.card }]}>
        <Text style={[styles.headerTitle, { color: colors.text }]}>ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™</Text>
      </View>

      <ScrollView showsVerticalScrollIndicator={false} style={styles.scrollView}>
        
        {/* User Profile Summary */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <View style={styles.profileHeader}>
            <View style={[styles.profileAvatar, { backgroundColor: colors.primary }]}>
              <Wallet size={32} color="white" />
            </View>
            <View style={styles.profileInfo}>
              <Text style={[styles.profileName, { color: colors.text }]}>ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿµÿ±ŸàŸÅŸä</Text>
              <Text style={[styles.profileData, { color: colors.textSecondary }]}>
                {getDataSummary()}
              </Text>
              {userData?.salary && (
                <Text style={[styles.profileSalary, { color: colors.primary }]}>
                  ÿ±ÿßÿ™ÿ® ÿ¥Ÿáÿ±Ÿä: {userData.salary.toLocaleString()} ÿØ.ÿ¨
                </Text>
              )}
            </View>
          </View>
        </View>

        {/* Appearance Settings */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>ÿßŸÑŸÖÿ∏Ÿáÿ± ŸàÿßŸÑÿπÿ±ÿ∂</Text>
          
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              {isDark ? <Moon size={24} color={colors.primary} /> : <Sun size={24} color={colors.accent} />}
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿØÿßŸÉŸÜ</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ŸäŸàŸÅÿ± ÿßŸÑÿ∑ÿßŸÇÿ© ŸàŸäÿ±Ÿäÿ≠ ÿßŸÑÿπŸäŸÜŸäŸÜ
                </Text>
              </View>
            </View>
            <Switch
              value={settings.darkMode}
              onValueChange={(value) => handleToggleSetting('darkMode', value)}
              trackColor={{ false: colors.border, true: colors.primary + '50' }}
              thumbColor={settings.darkMode ? colors.primary : colors.textSecondary}
            />
          </View>
        </View>

        {/* Financial Settings */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©</Text>
          
          <TouchableOpacity style={styles.settingItem} onPress={handleEditSalary}>
            <View style={styles.settingLeft}>
              <DollarSign size={24} color={colors.primary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ±ÿßÿ™ÿ® ÿßŸÑÿ¥Ÿáÿ±Ÿä</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  {userData?.salary ? `${userData.salary.toLocaleString()} ÿØ.ÿ¨` : 'ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ±ÿßÿ™ÿ®'}
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.settingItem} 
            onPress={() => {
              setTempMonthStart(settings.monthStartDate.toString());
              setShowMonthStartModal(true);
            }}
          >
            <View style={styles.settingLeft}>
              <Calendar size={24} color={colors.secondary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ®ÿØÿßŸäÿ© ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßŸÑŸä</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿßŸÑŸäŸàŸÖ {settings.monthStartDate} ŸÖŸÜ ŸÉŸÑ ÿ¥Ÿáÿ±
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Shield size={24} color={colors.warning} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ™ŸÜÿ®ŸäŸá ÿπŸÜÿØ ÿ™ÿ¨ÿßŸàÿ≤ 80% ŸÖŸÜ ÿßŸÑÿ±ÿßÿ™ÿ®
                </Text>
              </View>
            </View>
            <Switch
              value={settings.budgetWarnings}
              onValueChange={(value) => handleToggleSetting('budgetWarnings', value)}
              trackColor={{ false: colors.border, true: colors.warning + '50' }}
              thumbColor={settings.budgetWarnings ? colors.warning : colors.textSecondary}
            />
          </View>
        </View>

        {/* Notifications Settings */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸàÿßŸÑÿ™ÿ∞ŸÉŸäÿ±ÿßÿ™</Text>
          
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Bell size={24} color={colors.secondary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ™ŸÅÿπŸäŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿπÿßŸÖÿ© ŸÑŸÑÿ™ÿ∑ÿ®ŸäŸÇ
                </Text>
              </View>
            </View>
            <Switch
              value={settings.notifications}
              onValueChange={(value) => handleToggleSetting('notifications', value)}
              trackColor={{ false: colors.border, true: colors.secondary + '50' }}
              thumbColor={settings.notifications ? colors.secondary : colors.textSecondary}
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <Smartphone size={24} color={colors.accent} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ™ÿ∞ŸÉŸäÿ± ŸäŸàŸÖŸä</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ™ÿ∞ŸÉŸäÿ± ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ŸÅŸä {settings.reminderTime}
                </Text>
              </View>
            </View>
            <Switch
              value={settings.dailyReminder}
              onValueChange={(value) => handleToggleSetting('dailyReminder', value)}
              trackColor={{ false: colors.border, true: colors.accent + '50' }}
              thumbColor={settings.dailyReminder ? colors.accent : colors.textSecondary}
              disabled={!settings.notifications}
            />
          </View>

          {settings.notifications && settings.dailyReminder && (
            <TouchableOpacity 
              style={[styles.settingItem, styles.subSetting]}
              onPress={() => {
                setTempReminderTime(settings.reminderTime);
                setShowReminderTimeModal(true);
              }}
            >
              <View style={styles.settingLeft}>
                <View style={styles.indentedIcon} />
                <Text style={[styles.settingLabel, { color: colors.text }]}>ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±</Text>
              </View>
              <View style={styles.settingRight}>
                <Text style={[styles.settingValue, { color: colors.textSecondary }]}>
                  {settings.reminderTime}
                </Text>
                <ChevronRight size={16} color={colors.textSecondary} />
              </View>
            </TouchableOpacity>
          )}
        </View>

        {/* Data Management */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</Text>
          
          <TouchableOpacity style={styles.settingItem} onPress={handleExportData}>
            <View style={styles.settingLeft}>
              <Download size={24} color={colors.secondary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ™ÿµÿØŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ≠ŸÅÿ∏ ŸÜÿ≥ÿÆÿ© ÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ© ŸÖŸÜ ÿ®ŸäÿßŸÜÿßÿ™ŸÉ
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.settingItem} 
            onPress={() => router.push('/backup-restore')}
          >
            <View style={styles.settingLeft}>
              <Database size={24} color={colors.accent} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ•ÿØÿßÿ±ÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÑŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.settingItem} 
            onPress={() => router.push('/reports')}
          >
            <View style={styles.settingLeft}>
              <BarChart3 size={24} color={colors.primary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑŸÖŸÅÿµŸÑÿ©</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ŸÖÿ™ŸÇÿØŸÖÿ© ŸÑŸÑÿ•ŸÜŸÅÿßŸÇ
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>
          <TouchableOpacity style={styles.settingItem} onPress={handleResetMonth}>
            <View style={styles.settingLeft}>
              <RefreshCw size={24} color={colors.warning} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ•ÿπÿßÿØÿ© ÿ∂ÿ®ÿ∑ ÿßŸÑÿ¥Ÿáÿ±</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ®ÿØÿ° ÿ¥Ÿáÿ± ŸÖÿßŸÑŸä ÿ¨ÿØŸäÿØ
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <TouchableOpacity style={styles.settingItem} onPress={handleClearData}>
            <View style={styles.settingLeft}>
              <Trash2 size={24} color={colors.danger} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.danger }]}>ŸÖÿ≥ÿ≠ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿ≠ÿ∞ŸÅ ŸÜŸáÿßÿ¶Ÿä ŸÑÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>
        </View>

        {/* About & Help */}
        <View style={[styles.section, { backgroundColor: colors.card }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸàÿßŸÑÿØÿπŸÖ</Text>
          
          <TouchableOpacity style={styles.settingItem} onPress={showHelp}>
            <View style={styles.settingLeft}>
              <HelpCircle size={24} color={colors.accent} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ÿØŸÑŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>

          <TouchableOpacity style={styles.settingItem} onPress={showAbout}>
            <View style={styles.settingLeft}>
              <Info size={24} color={colors.secondary} />
              <View style={styles.settingTextContainer}>
                <Text style={[styles.settingLabel, { color: colors.text }]}>ÿ≠ŸàŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ</Text>
                <Text style={[styles.settingDescription, { color: colors.textSecondary }]}>
                  ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ•ÿµÿØÿßÿ± ŸàÿßŸÑŸÖÿ∑Ÿàÿ±
                </Text>
              </View>
            </View>
            <ChevronRight size={20} color={colors.textSecondary} />
          </TouchableOpacity>
        </View>

        {/* App Info */}
        <View style={[styles.appInfo, { backgroundColor: colors.card }]}>
          <Text style={[styles.appInfoText, { color: colors.textSecondary }]}>
            ŸÖÿµÿ±ŸàŸÅŸä - ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ¥ÿÆÿµŸäÿ©
          </Text>
          <Text style={[styles.appInfoText, { color: colors.textSecondary }]}>
            ÿßŸÑÿ•ÿµÿØÿßÿ± 1.0.0 ‚Ä¢ ÿµŸèŸÜÿπ ÿ®ŸÄ ‚ù§Ô∏è ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑÿπÿ±ÿ®
          </Text>
          <Text style={[styles.appInfoText, { color: colors.textSecondary }]}>
            ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿ≠ŸÅŸàÿ∏ÿ© ŸÖÿ≠ŸÑŸäÿßŸã ÿπŸÑŸâ ÿ¨Ÿáÿßÿ≤ŸÉ üîí
          </Text>
        </View>

      </ScrollView>

      {/* Month Start Modal */}
      <Modal
        visible={showMonthStartModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowMonthStartModal(false)}
      >
        <View style={[styles.modalOverlay, { backgroundColor: colors.modalBackground }]}>
          <View style={[styles.modalContent, { backgroundColor: colors.card }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>ÿ™ÿ≠ÿØŸäÿØ ÿ®ÿØÿßŸäÿ© ÿßŸÑÿ¥Ÿáÿ± ÿßŸÑŸÖÿßŸÑŸä</Text>
            <Text style={[styles.modalDescription, { color: colors.textSecondary }]}>
              ÿßÿÆÿ™ÿ± ÿßŸÑŸäŸàŸÖ ÿßŸÑÿ∞Ÿä Ÿäÿ®ÿØÿ£ ŸÅŸäŸá ÿ¥Ÿáÿ±ŸÉ ÿßŸÑŸÖÿßŸÑŸä (ÿπÿßÿØÿ© ŸäŸàŸÖ ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ±ÿßÿ™ÿ®)
            </Text>

            <TextInput
              style={[styles.modalInput, { 
                backgroundColor: colors.inputBg, 
                color: colors.text,
                borderColor: colors.border 
              }]}
              value={tempMonthStart}
              onChangeText={setTempMonthStart}
              placeholder="1"
              placeholderTextColor={colors.textSecondary}
              keyboardType="numeric"
              maxLength={2}
            />

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={[styles.modalButton, { backgroundColor: colors.textSecondary }]}
                onPress={() => setShowMonthStartModal(false)}
              >
                <Text style={styles.modalButtonText}>ÿ•ŸÑÿ∫ÿßÿ°</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, { backgroundColor: colors.primary }]}
                onPress={handleMonthStartSave}
              >
                <Text style={styles.modalButtonText}>ÿ≠ŸÅÿ∏</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Reminder Time Modal */}
      <Modal
        visible={showReminderTimeModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowReminderTimeModal(false)}
      >
        <View style={[styles.modalOverlay, { backgroundColor: colors.modalBackground }]}>
          <View style={[styles.modalContent, { backgroundColor: colors.card }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>ÿ™ÿ≠ÿØŸäÿØ ŸàŸÇÿ™ ÿßŸÑÿ™ÿ∞ŸÉŸäÿ±</Text>
            <Text style={[styles.modalDescription, { color: colors.textSecondary }]}>
              ÿßÿÆÿ™ÿ± ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ® ŸÑÿ™ÿ∞ŸÉŸäÿ±ŸÉ ÿ®ÿ™ÿ≥ÿ¨ŸäŸÑ ŸÖÿµÿßÿ±ŸäŸÅŸÉ ÿßŸÑŸäŸàŸÖŸäÿ©
            </Text>

            <TextInput
              style={[styles.modalInput, { 
                backgroundColor: colors.inputBg, 
                color: colors.text,
                borderColor: colors.border 
              }]}
              value={tempReminderTime}
              onChangeText={setTempReminderTime}
              placeholder="20:00"
              placeholderTextColor={colors.textSecondary}
            />

            <View style={styles.modalActions}>
              <TouchableOpacity
                style={[styles.modalButton, { backgroundColor: colors.textSecondary }]}
                onPress={() => setShowReminderTimeModal(false)}
              >
                <Text style={styles.modalButtonText}>ÿ•ŸÑÿ∫ÿßÿ°</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, { backgroundColor: colors.primary }]}
                onPress={handleReminderTimeSave}
              >
                <Text style={styles.modalButtonText}>ÿ≠ŸÅÿ∏</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingTop: 50,
    paddingBottom: 20,
    paddingHorizontal: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    elevation: 4,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    fontFamily: 'Cairo-Bold',
  },
  scrollView: {
    flex: 1,
  },
  section: {
    margin: 15,
    borderRadius: 15,
    elevation: 3,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    overflow: 'hidden',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    padding: 20,
    paddingBottom: 10,
    fontFamily: 'Cairo-Bold',
  },
  profileHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
  },
  profileAvatar: {
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 15,
  },
  profileInfo: {
    flex: 1,
  },
  profileName: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
    fontFamily: 'Cairo-Bold',
  },
  profileData: {
    fontSize: 14,
    marginBottom: 4,
    fontFamily: 'Cairo-Regular',
  },
  profileSalary: {
    fontSize: 14,
    fontWeight: '600',
    fontFamily: 'Cairo-SemiBold',
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderTopWidth: 0.5,
    borderTopColor: 'rgba(128,128,128,0.2)',
  },
  subSetting: {
    paddingLeft: 35,
    backgroundColor: 'rgba(128,128,128,0.05)',
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingTextContainer: {
    marginLeft: 15,
    flex: 1,
  },
  settingLabel: {
    fontSize: 16,
    fontFamily: 'Cairo-Regular',
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 12,
    fontFamily: 'Cairo-Regular',
    lineHeight: 16,
  },
  settingRight: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingValue: {
    fontSize: 14,
    marginRight: 8,
    fontFamily: 'Cairo-Regular',
  },
  indentedIcon: {
    width: 24,
    height: 24,
  },
  appInfo: {
    margin: 15,
    marginBottom: 30,
    padding: 20,
    borderRadius: 15,
    alignItems: 'center',
    elevation: 3,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  appInfoText: {
    fontSize: 12,
    marginBottom: 5,
    textAlign: 'center',
    fontFamily: 'Cairo-Regular',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    width: '100%',
    maxWidth: 400,
    padding: 25,
    borderRadius: 20,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
    fontFamily: 'Cairo-Bold',
  },
  modalDescription: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 20,
    fontFamily: 'Cairo-Regular',
  },
  modalInput: {
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    marginBottom: 20,
    fontSize: 16,
    textAlign: 'center',
    fontFamily: 'Cairo-Regular',
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalButton: {
    flex: 1,
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  modalButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    fontFamily: 'Cairo-Bold',
  },
});